var pos_summaries = <%= PartOfSpeech.tag_and_summary_hash.to_json %>;

var morphology_summaries = <%= MorphFeatures::MORPHOLOGY_SUMMARIES.to_json %>;
var morphology_abbreviated_summaries = <%= MorphFeatures::MORPHOLOGY_ABBREVIATED_SUMMARIES.to_json %>;

var morphology_values_by_language = {};
<% Source.pluck(:language_tag).uniq.each do |language| %>
  morphology_values_by_language[<%= language.to_json %>] = <%= MorphFeatures::pos_and_morphology_tag_space(language).to_json %>;
<% end %>

var field_sequence = <%= ([:pos] + MorphFeatures::MORPHOLOGY_PRESENTATION_SEQUENCE).to_json %>;

var morphology_field_positions = <%= Hash[*(MorphFeatures::MORPHOLOGY_POSITIONAL_TAG_SEQUENCE.zip((0..MorphFeatures::MORPHOLOGY_LENGTH).to_a).flatten)].to_json %>;
var morphology_default_pattern = <%= ('.' * MorphFeatures::MORPHOLOGY_LENGTH).to_json %>;

// Convert morph-features to lemma.
function decodeMorphFeaturesLemma(f) {
  return f.split(',')[0];
}

// Convert morph-features to POS-tag.
function decodeMorphFeaturesPOS(f) {
  return f.split(',')[1];
}

// Convert morph-features to morphology.
function decodeMorphFeaturesMorphology(f) {
  var morphology = f.split(',')[3];
  var tags = new Hash();

  <% MorphFeatures::MORPHOLOGY_POSITIONAL_TAG_SEQUENCE.each_with_index do |field, i| %>
    if (morphology && morphology[<%= i %>] != '-')
      tags['<%= field %>'] = morphology[<%= i %>];
    else
      tags['<%= field %>'] = null;
  <% end %>

  return tags;
}

// Convert lemma, POS-tag and morphology hash to morph-features.
function encodeMorphFeatures(language, lemma, pos, morphology_tags) {
  var s = lemma + ',' + pos + ',' + language + ',';

  <% MorphFeatures::MORPHOLOGY_POSITIONAL_TAG_SEQUENCE.each do |field| %>
    if (morphology_tags['<%= field %>'])
      s += morphology_tags['<%= field %>'];
    else
      s += '-';
  <% end %>

  return s;
}

// FIXME: Is there a simpler way of replacing a single
// character at a particular index in a string?
function stringReplaceChar(str, i, c) {
  var characters = str.toArray();
  characters[i] = c;
  return characters.join('');
}

// Updates a morphtag regexp pattern (containing "." for each field
// without a set value) with the value for a particular field.
function updateMorphtagPattern(pattern, field, value) {
  var position = morphology_field_positions[field];

  return stringReplaceChar(pattern, position, value);
}

function extractLegalFieldValues(language, pos, pattern, field) {
  var r = new RegExp("^" + pattern);
  var position = morphology_field_positions[field];

  // This can be done a lot more elegantly, but in FF2 and other
  // browsers with slow JS implementations we need to do this
  // the old-fashioned, compact way to avoid too much lagging.
  var fields = new Array;
  var space = morphology_values_by_language[language][pos];

  if (space) {
    for (var i = 0; i < space.length; i++) {
      if (space[i].match(r))
        fields.push(space[i][position]);
    }
  }

  return fields.uniq();
}

function extractFieldValues(field, full_morphtags) {
  return full_morphtags.collect(function(tag) { return tag[position]; }).uniq();
}

// Updates the option list for a field taking the given
// morphtag regexp pattern into account when computing the
// legal values.
function updateFieldOptions(language, field, pos, pattern) {
  var element = $(field + '_field');
  var field_values;

  if (field == "pos")
    field_values = _.keys(pos_summaries).sort();
  else
    field_values = extractLegalFieldValues(language, pos, pattern, field);

  var options = element.options;
  options.length = 0;

  field_values.each(function(value) {
    if (value != '-')
      options[options.length] = new Option(getFieldValueSummary(field, value), value);
  });

  if (options.length == 0) {
    element.hide();
  } else {
    element.show();
  }
}

function cascadedFieldUpdate(language, updated_field, new_field_values) {
  var pattern = morphology_default_pattern;
  var pos = null;

  for (var i = 0; i < field_sequence.length; i++) {
    var field = field_sequence[i];
    var element = $(field + '_field');

    var field_selection = null;

    if (new_field_values)
      field_selection = new_field_values[field];

    if (!field_selection)
      field_selection = getSelectSelection(element);

    updateFieldOptions(language, field, pos, pattern);

    // Ensure that noe "bad value" flags are left floating around.
    element.removeClassName('bad-field-value');

    if (field_selection) {
      for (var j = 0; j < element.options.length; j++) {
        if (element.options[j].value == field_selection) {
          element.options[j].selected = true;
          break;
        }
      }
    } else if (element.options.length > 0) {
      // No selection made but the field has to have a value.
      // Insert an empty option and highlight it as an error.
      element.addClassName('bad-field-value');
      var options = element.options;
      options[options.length] = new Option('', '-');
      options[options.length - 1].selected = true;
    }

    var current_selection = getSelectSelection(element);

    if (current_selection) {
      if (field == "pos")
        pos = current_selection
      else
        pattern = updateMorphtagPattern(pattern, field, current_selection);
    }
  }
}

function getFieldValueSummary(field, value) {
  if (field == 'pos')
    return pos_summaries[value]['summary'];
  else
    return morphology_summaries[field][value];
}

function present_tags(morphtag) {
  var s = new Array;
  field_sequence.each(function(tag) {
    value = morphtag.get(tag);

    if (value) {
      s.push($H($H(abbreviations).get(tag)).get(value));
    }
  });

  if (s.length == 0)
    return '&nbsp;';
  else
    return s.join(', ');
}

function present_pos_tag(pos) {
  if (pos)
    return pos_summaries[pos]['abbreviated_summary'] || '&nbsp;';
  else
    return '';
}

function present_morphology(morphology) {
  var s = new Array;
  field_sequence.each(function(tag) {
    value = morphology[tag];
    if (value)
      s.push(morphology_abbreviated_summaries[tag][value]);
  });

  if (s.length == 0)
    return '&nbsp;';
  else
    return s.join(', ');
}

function present_lemma(lemma) {
  return lemma || '&nbsp;';
}
