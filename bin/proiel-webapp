#!/usr/bin/env ruby
STDOUT.sync = true

$:.unshift File.join(File.dirname(__FILE__), *%w{ .. })

require 'config/environment'
require 'maintenance'

#rake make_fsts
#rake proiel:bilingual_dictionary:create   # Create a dictionary based on collocat...
#rake proiel:dependency_alignments:import  # Import dependency alignments
#rake proiel:history:prune:attribute       # Prune an attribute from history
#rake proiel:morphology:force_manual_tags  # Force manual morphological rules
#rake proiel:morphology:reassign           # Reassign a source_morphology field
#rake proiel:token_alignments:set          # Set token alignments
#rake proiel:validate                      # Validate database objects

def process(args, options, klass, method)
  klass.send(method, *args)
rescue ArgumentError => e
  STDERR.puts "Argument error: #{e}. Use --help for more information."
  exit 1
end

TARGETS = {
  dependency_alignments: Proiel::Maintenance::DependencyAlignments,
  history: Proiel::Maintenance::History,
  inflections: Proiel::Maintenance::Inflections,
  information_statuses: Proiel::Maintenance::InformationStatuses,
  morphology: Proiel::Maintenance::Morphology,
  notes: Proiel::Maintenance::Notes,
  semantic_relations: Proiel::Maintenance::SemanticRelations,
  semantic_tags: Proiel::Maintenance::SemanticTags,
  text: Proiel::Maintenance::Texts,
  token_alignments: Proiel::Maintenance::TokenAlignments,
}

def usage(error: false)
  STDERR.puts "proiel-webapp is a command-line interface for the PROIEL web application"
  STDERR.puts
  STDERR.puts "Usage:"
  STDERR.puts "   proiel-webapp [OPTIONS] help"
  STDERR.puts "   proiel-webapp [OPTIONS] import TARGET ARGUMENTS"
  STDERR.puts "   proiel-webapp [OPTIONS] export TARGET ARGUMENTS"
  STDERR.puts "   proiel-webapp [OPTIONS] delete TARGET ARGUMENTS"
  STDERR.puts
  STDERR.puts "Options:"
  STDERR.puts "   -V, --verbose   Display verbose information"
  exit(error ? 1 : 0)
end

options = ARGV.select { |arg| arg[/^-/] }
command, subcommand, *arguments = ARGV.reject { |arg| arg[/^-/] }

case command
when 'help'
  usage
when 'import', 'export', 'delete'
  if subcommand
    klass = TARGETS[subcommand.to_sym]

    if klass and klass.respond_to?(command)
      klass.send(command, *arguments)
    else
      usage(error: true)
    end
  else
    usage(error: true)
  end
else
  usage(error: true)
end
