#!/usr/bin/env ruby
require 'proiel'

language, infile = ARGV

def old_method(infile)
  blacklist = []
  remappings = {}

  File.open("perseus-blacklist") do |f|
    f.each_line do |l|
      l.chomp!
      l.sub!(/\#.*$/, '')
      l.split(/\s+/).each do |lm|
        if lm[/^(.*)>(.*)$/]
          # A remapping
          remappings[$1] = $2
        else
          # A blacklisting
          blacklist << lm
        end
      end
    end
  end

  blacklist.uniq!

  File.open(infile) do |f|
    f.each_line do |l|
      language, lemma, variant, *rest = l.split(',')
      key = variant != '' ? [lemma, variant].join(':') : lemma
      unless blacklist.include?(key)
        if n = remappings[key]
          lemma, variant = n.split(':')
          puts ([language, lemma, variant] + rest).join(',')
        else
          puts l
        end
      end
    end
  end
end

if language == "la"
  old_method(infile)
else
  f = PROIEL::FormListReader.new(infile)
  f.each_entry(language.to_sym) do |form, analyses|
    analyses.each do |analysis|
      morphtag, lemma = analysis.split(':')
      lemma, variant = lemma.split('#') if lemma

      m = PROIEL::MorphTag.new(morphtag)
      #FIXME: this is not quite good. Should we return to supporting patterns here?
      m[:degree] = 'p' if m[:major] == :A and m[:degree] == '-'
      m[:number] = 's' if m[:major] == :N and m[:number] == '-'
      m[:case] = 'n' if m[:major] == :N and m[:minor] == :b and m[:case] == '-'
      m[:gender] = 'm' if m[:major] == :N and m[:minor] == :b and m[:gender] == '-'
      m[:minor] = 'n' if m[:major] == :D and m[:minor] == '-'

      if m.is_valid?(:got)
        puts ([language, lemma, variant, form, m.to_s]).join(',')
      else
        STDERR.puts "Ignoring invalid tag #{morphtag}"
      end
    end
  end
end

